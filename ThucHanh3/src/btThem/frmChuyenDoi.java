/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package btThem;

import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author huyho
 */
public class frmChuyenDoi extends javax.swing.JFrame {

    /**
     * Creates new form frmChuyenDoi
     */
    public frmChuyenDoi() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIP0 = new javax.swing.JTextField();
        txtIP1 = new javax.swing.JTextField();
        txtIP2 = new javax.swing.JTextField();
        txtIP3 = new javax.swing.JTextField();
        txtSB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnTinh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNhiPhan = new javax.swing.JTextField();
        txtMask = new javax.swing.JTextField();
        txtMaskNhiPhan = new javax.swing.JTextField();
        txtNetWork = new javax.swing.JTextField();
        txtNetworkNhiPhan = new javax.swing.JTextField();
        txtBroadcast = new javax.swing.JTextField();
        txtBroadcastNhiPhan = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP");

        txtIP0.setText("192");

        txtIP1.setText("168");

        txtIP2.setText("1");

        txtIP3.setText("0");

        txtSB.setText("24");

        jLabel2.setText("/");

        btnTinh.setText("Tính");
        btnTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTinhActionPerformed(evt);
            }
        });

        jLabel3.setText("Địa chỉ nhị phân");

        jLabel4.setText("Địa chỉ mask");

        jLabel5.setText("Mask nhị phân");

        jLabel6.setText("Địa chỉ network");

        jLabel7.setText("Network nhị phân");

        jLabel8.setText("Địa chỉ broadcast");

        jLabel9.setText("Broadcast nhị phân");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtIP0, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtSB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTinh)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaskNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNetWork, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNetworkNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBroadcastNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnTinh))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMaskNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNetWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtNetworkNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtBroadcast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtBroadcastNhiPhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String getNetworkAddress(String binaryIP, int prefixLength) {
        StringBuilder network = new StringBuilder();

        for (int i = 0; i < binaryIP.length(); i++) {
            if (i < prefixLength) {
                network.append(binaryIP.charAt(i));
            } else {
                network.append('0');
            }
        }

        return network.toString();
    }
    
    public static String calculateNetworkAddress(String ipAddress, String subnetMask) {
        try {
            InetAddress ip = InetAddress.getByName(ipAddress);
            InetAddress subnet = InetAddress.getByName(subnetMask);

            byte[] ipBytes = ip.getAddress();
            byte[] subnetBytes = subnet.getAddress();

            byte[] networkBytes = new byte[ipBytes.length];

            for (int i = 0; i < ipBytes.length; i++) {
                networkBytes[i] = (byte) (ipBytes[i] & subnetBytes[i]);
            }

            InetAddress networkAddress = InetAddress.getByAddress(networkBytes);
            String networkAddressStr = networkAddress.getHostAddress();

         return networkAddressStr;

        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
         return "0";
    }

    public static String convertIPToBinary(String ipAddress) {
        String[] octets = ipAddress.split("\\.");
        StringBuilder binaryIP = new StringBuilder();

        for (String octet : octets) {
            int value = Integer.parseInt(octet);
            String binaryOctet = String.format("%8s", Integer.toBinaryString(value)).replace(' ', '0');
            binaryIP.append(binaryOctet);
        }

        return binaryIP.toString();
    }

    public static String addDotsToBinaryIP(String binaryIP) {
        StringBuilder dottedBinaryIP = new StringBuilder();

        for (int i = 0; i < binaryIP.length(); i++) {
            dottedBinaryIP.append(binaryIP.charAt(i));

            if ((i + 1) % 8 == 0 && i != binaryIP.length() - 1) {
                dottedBinaryIP.append('.');
            }
        }

        return dottedBinaryIP.toString();
    }

    public static String calculateSubnetMask(int prefixLength) {
        StringBuilder subnetMask = new StringBuilder();

        int fullOctets = prefixLength / 8;
        int remainingBits = prefixLength % 8;

        for (int i = 0; i < fullOctets; i++) {
            subnetMask.append("255");

            if (i < 3) {
                subnetMask.append(".");
            }
        }

        if (remainingBits > 0) {
            int value = 256 - (int) Math.pow(2, 8 - remainingBits);
            subnetMask.append(value);

            if (fullOctets < 3) {
                subnetMask.append(".");
            }
        } else {
            subnetMask.append("0");
        }

        return subnetMask.toString();
    }

    public static String calculateBroadcastAddress(String ipAddress, String subnetMask) {
        String[] ipOctets = ipAddress.split("\\.");
        String[] subnetOctets = subnetMask.split("\\.");
        StringBuilder broadcastAddress = new StringBuilder();

        for (int i = 0; i < 4; i++) {
            int ipOctet = Integer.parseInt(ipOctets[i]);
            int subnetOctet = Integer.parseInt(subnetOctets[i]);

            int broadcastOctet = ipOctet | (255 - subnetOctet);
            broadcastAddress.append(broadcastOctet);

            if (i < 3) {
                broadcastAddress.append(".");
            }
        }

        return broadcastAddress.toString();
    }


    private void btnTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTinhActionPerformed
        // TODO add your handling code here:
        String str = txtIP0.getText() + "." + txtIP1.getText() + "." + txtIP2.getText() + "." + txtIP3.getText();
        int prefixLength = Integer.parseInt(txtSB.getText());

        //dia chi nhi phan
        String diachiNhiPhan = convertIPToBinary(str);
        txtNhiPhan.setText(addDotsToBinaryIP(diachiNhiPhan));
    
        //dia chi mask
        String diachiMask = calculateSubnetMask(prefixLength);
        txtMask.setText(diachiMask);
        //diachi mask nhi phan
        String maskNhiPhan = convertIPToBinary(diachiMask);
        txtMaskNhiPhan.setText(addDotsToBinaryIP(maskNhiPhan));

         //dia chi network
        txtNetWork.setText(calculateNetworkAddress(str,diachiMask));
        //dia chi network nhi phan
        String diachinetworkNhiPhan = getNetworkAddress(str, prefixLength);
        txtNetworkNhiPhan.setText(addDotsToBinaryIP(diachiNhiPhan));
        
        // dia chi broadcast
        String strIP = str;
        String mask = txtMask.getText();
        if(strIP != null && mask !=null){
         String broadcast = calculateBroadcastAddress(strIP, mask);
         txtBroadcast.setText(broadcast);
        }
       
        // dia chi broadcast nhi phan        
        String broadcastNhiPhan = convertIPToBinary(txtBroadcast.getText());
        txtBroadcastNhiPhan.setText(addDotsToBinaryIP(broadcastNhiPhan));
    }//GEN-LAST:event_btnTinhActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmChuyenDoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmChuyenDoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmChuyenDoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmChuyenDoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmChuyenDoi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtBroadcast;
    private javax.swing.JTextField txtBroadcastNhiPhan;
    private javax.swing.JTextField txtIP0;
    private javax.swing.JTextField txtIP1;
    private javax.swing.JTextField txtIP2;
    private javax.swing.JTextField txtIP3;
    private javax.swing.JTextField txtMask;
    private javax.swing.JTextField txtMaskNhiPhan;
    private javax.swing.JTextField txtNetWork;
    private javax.swing.JTextField txtNetworkNhiPhan;
    private javax.swing.JTextField txtNhiPhan;
    private javax.swing.JTextField txtSB;
    // End of variables declaration//GEN-END:variables
}
